name: Continuous Deployment Workflow

# This workflow is triggered whenever commits are pushed to the master branch or manually triggered using the "workflow_dispatch" event
on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  phpcs:
    name: PHP coding standards
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the changed files back to the repository.
      contents: write
      # Set up a MySQL service
    services:
      mysql:
        image: mysql:latest
        ports:
          - '3306:3306'
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_HOST: 127.0.0.1
    steps:
      # Checkout the repository to access its content.
      - uses: actions/checkout@v4.1.0
        name: 'Checkout repository'

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      # Cache Composer dependencies to speed up future runs.
      - uses: actions/cache@v3.3.2
        env:
          cache-name: cache-composer-dependencies
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # Set up the PHP environment.
      - name: Setup PHP Action
        uses: shivammathur/setup-php@2.26.0 
        with:
          php-version: '8.1'
          coverage: none
          tools: composer, cs2pr

      - name: Log debug information
        run: |
          php --version
          composer --version

      - name: Install Composer dependencies
        run: |
            composer install --prefer-dist --no-suggest --no-progress --no-ansi --no-interaction
            echo "${PWD}/vendor/bin" >> $GITHUB_PATH

      - name: Run & fix PHP Code Sniffer
        uses: shalior/wordpress-phpcs-action@v1.0.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          use_default_configuration_file: true
          phpcs_args: '-n' # ignore warnings

      # Automatically commit the fixes made by PHP Code Sniffer.
      - uses: stefanzweifel/git-auto-commit-action@v4 
        with:
          commit_message: Fix PHPCS errors

      - name: Set up WordPress and WordPress Test Library
        uses: sjinks/setup-wordpress-test-library@master
        with:
          version: latest

      - name: Verify mysql connection
        run: |
          while ! mysqladmin ping -h 127.0.0.1 -P ${{ job.services.mysql.ports[3306] }} --silent; do
            sleep 1
          done
        timeout-minutes: 1
  
  # Deploy the master branch to EC2 server.
  deploy_development:
    needs: phpcs
    name: 'Deploy to EC2'
    runs-on: ubuntu-latest
    
    steps:
      # Checkout the repository to access its content.
      - uses: actions/checkout@v4.1.0
        name: 'Checkout repository'

      # Deploy files to the server using rsync.
      - uses: Burnett01/rsync-deployments@6.0.0
        name: 'Deploy to server'
        with:
          switches: --recursive --exclude=.git -rlgoDzvc -i --delete
          path: .
          remote_path: ${{ secrets.REMOTE_TARGET }}
          remote_host: ${{ secrets.HOSTNAME }}
          remote_user: ${{ secrets.REMOTE_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Send a message to a Slack channel if the job fails.
      - name: Slack Notification 
        if: failure() # Only send a message if the job fails.
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        
